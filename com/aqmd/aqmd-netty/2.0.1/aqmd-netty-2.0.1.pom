<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.aqmd</groupId>
		<artifactId>netty-parent</artifactId>
		<version>2.0.1</version>
	</parent>
	<artifactId>aqmd-netty</artifactId>
	<packaging>jar</packaging>
	<name>${project.artifactId}</name>
	<description>
		hawk产品的tcp服务器提供，通过netty实现
	</description>
	<dependencies>
		<dependency>
			<groupId>com.aqmd</groupId>
			<artifactId>aqmd-netty-core</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>com.aqmd</groupId>
			<artifactId>aqmd-netty-api</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
		</dependency>

		
		<!-- shiro -->
		<dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-ehcache</artifactId>
            <version>${shiro_version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-quartz</artifactId>
            <version>${shiro_version}</version>
			<exclusions>
				<exclusion>
					<groupId>org.opensymphony.quartz</groupId>
					<artifactId>quartz</artifactId>
				</exclusion>
			</exclusions>
        </dependency>
		<dependency>
			<groupId>org.quartz-scheduler</groupId>
			<artifactId>quartz</artifactId>
			<version>2.3.0</version>
		</dependency>
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-spring</artifactId>
            <version>${shiro_version}</version>
            <exclusions>
            	<exclusion>
            		<groupId>org.apache.shiro</groupId>
            		<artifactId>shiro-web</artifactId>
            	</exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-core</artifactId>
            <version>${shiro_version}</version>
        </dependency>
        <!-- shiro结束 -->
		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache-core</artifactId>
			<version>${ehcache_version}</version>
		</dependency>
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>1.2.7</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-websocket</artifactId>
		</dependency>
	</dependencies>
	<!-- 构建项目需要的插件配置 -->
	<build>
		<resources>
			<resource>
				<directory>src\main\java</directory>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>src\main\resources</directory>
			</resource>
		</resources>
		<plugins>
			<plugin>
			  <groupId>org.jacoco</groupId>
			  <artifactId>jacoco-maven-plugin</artifactId>
			  <version>0.7.7.201606060606</version>
			  <executions>
			        <!--  准备指向Jacoco运行时Agent的属性，在测试执行之前传递给虚拟机参数-->
			        <execution>
			            <id>pre-unit-test</id>
			            <goals>
			                <goal>prepare-agent</goal>
			            </goals>
			            <configuration>
			                <!-- 设置覆盖率数据文件路径 -->
			                <destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>
			                <!-- 设置属性名称，Maven surefire插件需要引用这个作为命令行参数 -->
			                <propertyName>surefireArgLine</propertyName>
			            </configuration>
		       		</execution>
			        <!--确保在单元测试执行之后生成覆盖率报告-->
			        <execution>
			            <id>post-unit-test</id>
			            <phase>test</phase>
			            <goals>
			                <goal>report</goal>
			            </goals>
			            <configuration>
			                <!-- 引用覆盖率文件的路径-->
			                <dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile>
			                <!-- 设置覆盖率报告存放路径. -->
			                <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
			            </configuration>
			        </execution>
			    </executions>
			</plugin>
		</plugins>
	</build>
</project>